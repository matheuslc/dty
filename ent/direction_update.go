// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/matheuslc/dty/ent/direction"
	"github.com/matheuslc/dty/ent/predicate"
)

// DirectionUpdate is the builder for updating Direction entities.
type DirectionUpdate struct {
	config
	description *string
	name        *string
	predicates  []predicate.Direction
}

// Where adds a new predicate for the builder.
func (du *DirectionUpdate) Where(ps ...predicate.Direction) *DirectionUpdate {
	du.predicates = append(du.predicates, ps...)
	return du
}

// SetDescription sets the description field.
func (du *DirectionUpdate) SetDescription(s string) *DirectionUpdate {
	du.description = &s
	return du
}

// SetName sets the name field.
func (du *DirectionUpdate) SetName(s string) *DirectionUpdate {
	du.name = &s
	return du
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (du *DirectionUpdate) Save(ctx context.Context) (int, error) {
	return du.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DirectionUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DirectionUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DirectionUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DirectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	selector := sql.Select(direction.FieldID).From(sql.Table(direction.Table))
	for _, p := range du.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = du.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("ent: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := du.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		builder = sql.Update(direction.Table).Where(sql.InInts(direction.FieldID, ids...))
	)
	if value := du.description; value != nil {
		builder.Set(direction.FieldDescription, *value)
	}
	if value := du.name; value != nil {
		builder.Set(direction.FieldName, *value)
	}
	if !builder.Empty() {
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// DirectionUpdateOne is the builder for updating a single Direction entity.
type DirectionUpdateOne struct {
	config
	id          int
	description *string
	name        *string
}

// SetDescription sets the description field.
func (duo *DirectionUpdateOne) SetDescription(s string) *DirectionUpdateOne {
	duo.description = &s
	return duo
}

// SetName sets the name field.
func (duo *DirectionUpdateOne) SetName(s string) *DirectionUpdateOne {
	duo.name = &s
	return duo
}

// Save executes the query and returns the updated entity.
func (duo *DirectionUpdateOne) Save(ctx context.Context) (*Direction, error) {
	return duo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DirectionUpdateOne) SaveX(ctx context.Context) *Direction {
	d, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return d
}

// Exec executes the query on the entity.
func (duo *DirectionUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DirectionUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DirectionUpdateOne) sqlSave(ctx context.Context) (d *Direction, err error) {
	selector := sql.Select(direction.Columns...).From(sql.Table(direction.Table))
	direction.ID(duo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = duo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		d = &Direction{config: duo.config}
		if err := d.FromRows(rows); err != nil {
			return nil, fmt.Errorf("ent: failed scanning row into Direction: %v", err)
		}
		id = d.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("Direction with id: %v", duo.id)}
	case n > 1:
		return nil, fmt.Errorf("ent: more than one Direction with the same id: %v", duo.id)
	}

	tx, err := duo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		builder = sql.Update(direction.Table).Where(sql.InInts(direction.FieldID, ids...))
	)
	if value := duo.description; value != nil {
		builder.Set(direction.FieldDescription, *value)
		d.Description = *value
	}
	if value := duo.name; value != nil {
		builder.Set(direction.FieldName, *value)
		d.Name = *value
	}
	if !builder.Empty() {
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return d, nil
}
