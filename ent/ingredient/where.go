// Code generated by entc, DO NOT EDIT.

package ingredient

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/matheuslc/dty/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldID), id))
		},
	)
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(ids) == 0 {
				s.Where(sql.False())
				return
			}
			v := make([]interface{}, len(ids))
			for i := range v {
				v[i] = ids[i]
			}
			s.Where(sql.In(s.C(FieldID), v...))
		},
	)
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(ids) == 0 {
				s.Where(sql.False())
				return
			}
			v := make([]interface{}, len(ids))
			for i := range v {
				v[i] = ids[i]
			}
			s.Where(sql.NotIn(s.C(FieldID), v...))
		},
	)
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldID), id))
		},
	)
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldID), id))
		},
	)
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldID), id))
		},
	)
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldID), id))
		},
	)
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldName), v))
		},
	)
}

// UnitType applies equality check predicate on the "unitType" field. It's identical to UnitTypeEQ.
func UnitType(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldUnitType), v))
		},
	)
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldName), v))
		},
	)
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldName), v))
		},
	)
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Ingredient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ingredient(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldName), v...))
		},
	)
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Ingredient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ingredient(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldName), v...))
		},
	)
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldName), v))
		},
	)
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldName), v))
		},
	)
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldName), v))
		},
	)
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldName), v))
		},
	)
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldName), v))
		},
	)
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldName), v))
		},
	)
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldName), v))
		},
	)
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldName), v))
		},
	)
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldName), v))
		},
	)
}

// UnitTypeEQ applies the EQ predicate on the "unitType" field.
func UnitTypeEQ(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldUnitType), v))
		},
	)
}

// UnitTypeNEQ applies the NEQ predicate on the "unitType" field.
func UnitTypeNEQ(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldUnitType), v))
		},
	)
}

// UnitTypeIn applies the In predicate on the "unitType" field.
func UnitTypeIn(vs ...string) predicate.Ingredient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ingredient(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldUnitType), v...))
		},
	)
}

// UnitTypeNotIn applies the NotIn predicate on the "unitType" field.
func UnitTypeNotIn(vs ...string) predicate.Ingredient {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ingredient(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldUnitType), v...))
		},
	)
}

// UnitTypeGT applies the GT predicate on the "unitType" field.
func UnitTypeGT(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldUnitType), v))
		},
	)
}

// UnitTypeGTE applies the GTE predicate on the "unitType" field.
func UnitTypeGTE(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldUnitType), v))
		},
	)
}

// UnitTypeLT applies the LT predicate on the "unitType" field.
func UnitTypeLT(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldUnitType), v))
		},
	)
}

// UnitTypeLTE applies the LTE predicate on the "unitType" field.
func UnitTypeLTE(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldUnitType), v))
		},
	)
}

// UnitTypeContains applies the Contains predicate on the "unitType" field.
func UnitTypeContains(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldUnitType), v))
		},
	)
}

// UnitTypeHasPrefix applies the HasPrefix predicate on the "unitType" field.
func UnitTypeHasPrefix(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldUnitType), v))
		},
	)
}

// UnitTypeHasSuffix applies the HasSuffix predicate on the "unitType" field.
func UnitTypeHasSuffix(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldUnitType), v))
		},
	)
}

// UnitTypeEqualFold applies the EqualFold predicate on the "unitType" field.
func UnitTypeEqualFold(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldUnitType), v))
		},
	)
}

// UnitTypeContainsFold applies the ContainsFold predicate on the "unitType" field.
func UnitTypeContainsFold(v string) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldUnitType), v))
		},
	)
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Ingredient) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			for _, p := range predicates {
				p(s)
			}
		},
	)
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Ingredient) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			for i, p := range predicates {
				if i > 0 {
					s.Or()
				}
				p(s)
			}
		},
	)
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ingredient) predicate.Ingredient {
	return predicate.Ingredient(
		func(s *sql.Selector) {
			p(s.Not())
		},
	)
}
