// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/matheuslc/dty/ent/ingredient"
	"github.com/matheuslc/dty/ent/predicate"
)

// IngredientUpdate is the builder for updating Ingredient entities.
type IngredientUpdate struct {
	config
	name       *string
	unitType   *string
	predicates []predicate.Ingredient
}

// Where adds a new predicate for the builder.
func (iu *IngredientUpdate) Where(ps ...predicate.Ingredient) *IngredientUpdate {
	iu.predicates = append(iu.predicates, ps...)
	return iu
}

// SetName sets the name field.
func (iu *IngredientUpdate) SetName(s string) *IngredientUpdate {
	iu.name = &s
	return iu
}

// SetUnitType sets the unitType field.
func (iu *IngredientUpdate) SetUnitType(s string) *IngredientUpdate {
	iu.unitType = &s
	return iu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (iu *IngredientUpdate) Save(ctx context.Context) (int, error) {
	return iu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IngredientUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IngredientUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IngredientUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *IngredientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	selector := sql.Select(ingredient.FieldID).From(sql.Table(ingredient.Table))
	for _, p := range iu.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = iu.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("ent: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := iu.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		builder = sql.Update(ingredient.Table).Where(sql.InInts(ingredient.FieldID, ids...))
	)
	if value := iu.name; value != nil {
		builder.Set(ingredient.FieldName, *value)
	}
	if value := iu.unitType; value != nil {
		builder.Set(ingredient.FieldUnitType, *value)
	}
	if !builder.Empty() {
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// IngredientUpdateOne is the builder for updating a single Ingredient entity.
type IngredientUpdateOne struct {
	config
	id       int
	name     *string
	unitType *string
}

// SetName sets the name field.
func (iuo *IngredientUpdateOne) SetName(s string) *IngredientUpdateOne {
	iuo.name = &s
	return iuo
}

// SetUnitType sets the unitType field.
func (iuo *IngredientUpdateOne) SetUnitType(s string) *IngredientUpdateOne {
	iuo.unitType = &s
	return iuo
}

// Save executes the query and returns the updated entity.
func (iuo *IngredientUpdateOne) Save(ctx context.Context) (*Ingredient, error) {
	return iuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IngredientUpdateOne) SaveX(ctx context.Context) *Ingredient {
	i, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return i
}

// Exec executes the query on the entity.
func (iuo *IngredientUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IngredientUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *IngredientUpdateOne) sqlSave(ctx context.Context) (i *Ingredient, err error) {
	selector := sql.Select(ingredient.Columns...).From(sql.Table(ingredient.Table))
	ingredient.ID(iuo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = iuo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		i = &Ingredient{config: iuo.config}
		if err := i.FromRows(rows); err != nil {
			return nil, fmt.Errorf("ent: failed scanning row into Ingredient: %v", err)
		}
		id = i.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("Ingredient with id: %v", iuo.id)}
	case n > 1:
		return nil, fmt.Errorf("ent: more than one Ingredient with the same id: %v", iuo.id)
	}

	tx, err := iuo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		builder = sql.Update(ingredient.Table).Where(sql.InInts(ingredient.FieldID, ids...))
	)
	if value := iuo.name; value != nil {
		builder.Set(ingredient.FieldName, *value)
		i.Name = *value
	}
	if value := iuo.unitType; value != nil {
		builder.Set(ingredient.FieldUnitType, *value)
		i.UnitType = *value
	}
	if !builder.Empty() {
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return i, nil
}
