// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/matheuslc/dty/ent/direction"
)

// DirectionCreate is the builder for creating a Direction entity.
type DirectionCreate struct {
	config
	description *string
	name        *string
}

// SetDescription sets the description field.
func (dc *DirectionCreate) SetDescription(s string) *DirectionCreate {
	dc.description = &s
	return dc
}

// SetName sets the name field.
func (dc *DirectionCreate) SetName(s string) *DirectionCreate {
	dc.name = &s
	return dc
}

// Save creates the Direction in the database.
func (dc *DirectionCreate) Save(ctx context.Context) (*Direction, error) {
	if dc.description == nil {
		return nil, errors.New("ent: missing required field \"description\"")
	}
	if dc.name == nil {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	return dc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DirectionCreate) SaveX(ctx context.Context) *Direction {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dc *DirectionCreate) sqlSave(ctx context.Context) (*Direction, error) {
	var (
		res sql.Result
		d   = &Direction{config: dc.config}
	)
	tx, err := dc.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	builder := sql.Dialect(dc.driver.Dialect()).
		Insert(direction.Table).
		Default()
	if value := dc.description; value != nil {
		builder.Set(direction.FieldDescription, *value)
		d.Description = *value
	}
	if value := dc.name; value != nil {
		builder.Set(direction.FieldName, *value)
		d.Name = *value
	}
	query, args := builder.Query()
	if err := tx.Exec(ctx, query, args, &res); err != nil {
		return nil, rollback(tx, err)
	}
	id, err := res.LastInsertId()
	if err != nil {
		return nil, rollback(tx, err)
	}
	d.ID = int(id)
	if err := tx.Commit(); err != nil {
		return nil, err
	}
	return d, nil
}
