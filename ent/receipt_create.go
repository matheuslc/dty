// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/matheuslc/dty/ent/direction"
	"github.com/matheuslc/dty/ent/ingredient"
	"github.com/matheuslc/dty/ent/receipt"
)

// ReceiptCreate is the builder for creating a Receipt entity.
type ReceiptCreate struct {
	config
	name        *string
	portions    *int
	ingredients map[int]struct{}
	directions  map[int]struct{}
}

// SetName sets the name field.
func (rc *ReceiptCreate) SetName(s string) *ReceiptCreate {
	rc.name = &s
	return rc
}

// SetPortions sets the portions field.
func (rc *ReceiptCreate) SetPortions(i int) *ReceiptCreate {
	rc.portions = &i
	return rc
}

// AddIngredientIDs adds the ingredients edge to Ingredient by ids.
func (rc *ReceiptCreate) AddIngredientIDs(ids ...int) *ReceiptCreate {
	if rc.ingredients == nil {
		rc.ingredients = make(map[int]struct{})
	}
	for i := range ids {
		rc.ingredients[ids[i]] = struct{}{}
	}
	return rc
}

// AddIngredients adds the ingredients edges to Ingredient.
func (rc *ReceiptCreate) AddIngredients(i ...*Ingredient) *ReceiptCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return rc.AddIngredientIDs(ids...)
}

// AddDirectionIDs adds the directions edge to Direction by ids.
func (rc *ReceiptCreate) AddDirectionIDs(ids ...int) *ReceiptCreate {
	if rc.directions == nil {
		rc.directions = make(map[int]struct{})
	}
	for i := range ids {
		rc.directions[ids[i]] = struct{}{}
	}
	return rc
}

// AddDirections adds the directions edges to Direction.
func (rc *ReceiptCreate) AddDirections(d ...*Direction) *ReceiptCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return rc.AddDirectionIDs(ids...)
}

// Save creates the Receipt in the database.
func (rc *ReceiptCreate) Save(ctx context.Context) (*Receipt, error) {
	if rc.name == nil {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if rc.portions == nil {
		return nil, errors.New("ent: missing required field \"portions\"")
	}
	return rc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReceiptCreate) SaveX(ctx context.Context) *Receipt {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rc *ReceiptCreate) sqlSave(ctx context.Context) (*Receipt, error) {
	var (
		res sql.Result
		r   = &Receipt{config: rc.config}
	)
	tx, err := rc.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	builder := sql.Dialect(rc.driver.Dialect()).
		Insert(receipt.Table).
		Default()
	if value := rc.name; value != nil {
		builder.Set(receipt.FieldName, *value)
		r.Name = *value
	}
	if value := rc.portions; value != nil {
		builder.Set(receipt.FieldPortions, *value)
		r.Portions = *value
	}
	query, args := builder.Query()
	if err := tx.Exec(ctx, query, args, &res); err != nil {
		return nil, rollback(tx, err)
	}
	id, err := res.LastInsertId()
	if err != nil {
		return nil, rollback(tx, err)
	}
	r.ID = int(id)
	if len(rc.ingredients) > 0 {
		p := sql.P()
		for eid := range rc.ingredients {
			p.Or().EQ(ingredient.FieldID, eid)
		}
		query, args := sql.Update(receipt.IngredientsTable).
			Set(receipt.IngredientsColumn, id).
			Where(sql.And(p, sql.IsNull(receipt.IngredientsColumn))).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
		affected, err := res.RowsAffected()
		if err != nil {
			return nil, rollback(tx, err)
		}
		if int(affected) < len(rc.ingredients) {
			return nil, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"ingredients\" %v already connected to a different \"Receipt\"", keys(rc.ingredients))})
		}
	}
	if len(rc.directions) > 0 {
		p := sql.P()
		for eid := range rc.directions {
			p.Or().EQ(direction.FieldID, eid)
		}
		query, args := sql.Update(receipt.DirectionsTable).
			Set(receipt.DirectionsColumn, id).
			Where(sql.And(p, sql.IsNull(receipt.DirectionsColumn))).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
		affected, err := res.RowsAffected()
		if err != nil {
			return nil, rollback(tx, err)
		}
		if int(affected) < len(rc.directions) {
			return nil, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"directions\" %v already connected to a different \"Receipt\"", keys(rc.directions))})
		}
	}
	if err := tx.Commit(); err != nil {
		return nil, err
	}
	return r, nil
}
