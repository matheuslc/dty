// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/matheuslc/dty/ent/direction"
	"github.com/matheuslc/dty/ent/ingredient"
	"github.com/matheuslc/dty/ent/predicate"
	"github.com/matheuslc/dty/ent/receipt"
)

// ReceiptQuery is the builder for querying Receipt entities.
type ReceiptQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.Receipt
	// intermediate queries.
	sql *sql.Selector
}

// Where adds a new predicate for the builder.
func (rq *ReceiptQuery) Where(ps ...predicate.Receipt) *ReceiptQuery {
	rq.predicates = append(rq.predicates, ps...)
	return rq
}

// Limit adds a limit step to the query.
func (rq *ReceiptQuery) Limit(limit int) *ReceiptQuery {
	rq.limit = &limit
	return rq
}

// Offset adds an offset step to the query.
func (rq *ReceiptQuery) Offset(offset int) *ReceiptQuery {
	rq.offset = &offset
	return rq
}

// Order adds an order step to the query.
func (rq *ReceiptQuery) Order(o ...Order) *ReceiptQuery {
	rq.order = append(rq.order, o...)
	return rq
}

// QueryIngredients chains the current query on the ingredients edge.
func (rq *ReceiptQuery) QueryIngredients() *IngredientQuery {
	query := &IngredientQuery{config: rq.config}
	t1 := sql.Table(ingredient.Table)
	t2 := rq.sqlQuery()
	t2.Select(t2.C(receipt.FieldID))
	query.sql = sql.Select().
		From(t1).
		Join(t2).
		On(t1.C(receipt.IngredientsColumn), t2.C(receipt.FieldID))
	return query
}

// QueryDirections chains the current query on the directions edge.
func (rq *ReceiptQuery) QueryDirections() *DirectionQuery {
	query := &DirectionQuery{config: rq.config}
	t1 := sql.Table(direction.Table)
	t2 := rq.sqlQuery()
	t2.Select(t2.C(receipt.FieldID))
	query.sql = sql.Select().
		From(t1).
		Join(t2).
		On(t1.C(receipt.DirectionsColumn), t2.C(receipt.FieldID))
	return query
}

// First returns the first Receipt entity in the query. Returns *ErrNotFound when no receipt was found.
func (rq *ReceiptQuery) First(ctx context.Context) (*Receipt, error) {
	rs, err := rq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(rs) == 0 {
		return nil, &ErrNotFound{receipt.Label}
	}
	return rs[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rq *ReceiptQuery) FirstX(ctx context.Context) *Receipt {
	r, err := rq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return r
}

// FirstID returns the first Receipt id in the query. Returns *ErrNotFound when no id was found.
func (rq *ReceiptQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &ErrNotFound{receipt.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (rq *ReceiptQuery) FirstXID(ctx context.Context) int {
	id, err := rq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only Receipt entity in the query, returns an error if not exactly one entity was returned.
func (rq *ReceiptQuery) Only(ctx context.Context) (*Receipt, error) {
	rs, err := rq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(rs) {
	case 1:
		return rs[0], nil
	case 0:
		return nil, &ErrNotFound{receipt.Label}
	default:
		return nil, &ErrNotSingular{receipt.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rq *ReceiptQuery) OnlyX(ctx context.Context) *Receipt {
	r, err := rq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return r
}

// OnlyID returns the only Receipt id in the query, returns an error if not exactly one id was returned.
func (rq *ReceiptQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = rq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &ErrNotFound{receipt.Label}
	default:
		err = &ErrNotSingular{receipt.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (rq *ReceiptQuery) OnlyXID(ctx context.Context) int {
	id, err := rq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Receipts.
func (rq *ReceiptQuery) All(ctx context.Context) ([]*Receipt, error) {
	return rq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rq *ReceiptQuery) AllX(ctx context.Context) []*Receipt {
	rs, err := rq.All(ctx)
	if err != nil {
		panic(err)
	}
	return rs
}

// IDs executes the query and returns a list of Receipt ids.
func (rq *ReceiptQuery) IDs(ctx context.Context) ([]int, error) {
	return rq.sqlIDs(ctx)
}

// IDsX is like IDs, but panics if an error occurs.
func (rq *ReceiptQuery) IDsX(ctx context.Context) []int {
	ids, err := rq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rq *ReceiptQuery) Count(ctx context.Context) (int, error) {
	return rq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rq *ReceiptQuery) CountX(ctx context.Context) int {
	count, err := rq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rq *ReceiptQuery) Exist(ctx context.Context) (bool, error) {
	return rq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rq *ReceiptQuery) ExistX(ctx context.Context) bool {
	exist, err := rq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rq *ReceiptQuery) Clone() *ReceiptQuery {
	return &ReceiptQuery{
		config:     rq.config,
		limit:      rq.limit,
		offset:     rq.offset,
		order:      append([]Order{}, rq.order...),
		unique:     append([]string{}, rq.unique...),
		predicates: append([]predicate.Receipt{}, rq.predicates...),
		// clone intermediate queries.
		sql: rq.sql.Clone(),
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Receipt.Query().
//		GroupBy(receipt.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (rq *ReceiptQuery) GroupBy(field string, fields ...string) *ReceiptGroupBy {
	group := &ReceiptGroupBy{config: rq.config}
	group.fields = append([]string{field}, fields...)
	group.sql = rq.sqlQuery()
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Receipt.Query().
//		Select(receipt.FieldName).
//		Scan(ctx, &v)
//
func (rq *ReceiptQuery) Select(field string, fields ...string) *ReceiptSelect {
	selector := &ReceiptSelect{config: rq.config}
	selector.fields = append([]string{field}, fields...)
	selector.sql = rq.sqlQuery()
	return selector
}

func (rq *ReceiptQuery) sqlAll(ctx context.Context) ([]*Receipt, error) {
	rows := &sql.Rows{}
	selector := rq.sqlQuery()
	if unique := rq.unique; len(unique) == 0 {
		selector.Distinct()
	}
	query, args := selector.Query()
	if err := rq.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var rs Receipts
	if err := rs.FromRows(rows); err != nil {
		return nil, err
	}
	rs.config(rq.config)
	return rs, nil
}

func (rq *ReceiptQuery) sqlCount(ctx context.Context) (int, error) {
	rows := &sql.Rows{}
	selector := rq.sqlQuery()
	unique := []string{receipt.FieldID}
	if len(rq.unique) > 0 {
		unique = rq.unique
	}
	selector.Count(sql.Distinct(selector.Columns(unique...)...))
	query, args := selector.Query()
	if err := rq.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()
	if !rows.Next() {
		return 0, errors.New("ent: no rows found")
	}
	var n int
	if err := rows.Scan(&n); err != nil {
		return 0, fmt.Errorf("ent: failed reading count: %v", err)
	}
	return n, nil
}

func (rq *ReceiptQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := rq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (rq *ReceiptQuery) sqlIDs(ctx context.Context) ([]int, error) {
	vs, err := rq.sqlAll(ctx)
	if err != nil {
		return nil, err
	}
	var ids []int
	for _, v := range vs {
		ids = append(ids, v.ID)
	}
	return ids, nil
}

func (rq *ReceiptQuery) sqlQuery() *sql.Selector {
	t1 := sql.Table(receipt.Table)
	selector := sql.Select(t1.Columns(receipt.Columns...)...).From(t1)
	if rq.sql != nil {
		selector = rq.sql
		selector.Select(selector.Columns(receipt.Columns...)...)
	}
	for _, p := range rq.predicates {
		p(selector)
	}
	for _, p := range rq.order {
		p(selector)
	}
	if offset := rq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ReceiptGroupBy is the builder for group-by Receipt entities.
type ReceiptGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate queries.
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rgb *ReceiptGroupBy) Aggregate(fns ...Aggregate) *ReceiptGroupBy {
	rgb.fns = append(rgb.fns, fns...)
	return rgb
}

// Scan applies the group-by query and scan the result into the given value.
func (rgb *ReceiptGroupBy) Scan(ctx context.Context, v interface{}) error {
	return rgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rgb *ReceiptGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := rgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (rgb *ReceiptGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(rgb.fields) > 1 {
		return nil, errors.New("ent: ReceiptGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := rgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rgb *ReceiptGroupBy) StringsX(ctx context.Context) []string {
	v, err := rgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (rgb *ReceiptGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(rgb.fields) > 1 {
		return nil, errors.New("ent: ReceiptGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := rgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rgb *ReceiptGroupBy) IntsX(ctx context.Context) []int {
	v, err := rgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (rgb *ReceiptGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(rgb.fields) > 1 {
		return nil, errors.New("ent: ReceiptGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := rgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rgb *ReceiptGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := rgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (rgb *ReceiptGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(rgb.fields) > 1 {
		return nil, errors.New("ent: ReceiptGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := rgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rgb *ReceiptGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := rgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rgb *ReceiptGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := rgb.sqlQuery().Query()
	if err := rgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rgb *ReceiptGroupBy) sqlQuery() *sql.Selector {
	selector := rgb.sql
	columns := make([]string, 0, len(rgb.fields)+len(rgb.fns))
	columns = append(columns, rgb.fields...)
	for _, fn := range rgb.fns {
		columns = append(columns, fn.SQL(selector))
	}
	return selector.Select(columns...).GroupBy(rgb.fields...)
}

// ReceiptSelect is the builder for select fields of Receipt entities.
type ReceiptSelect struct {
	config
	fields []string
	// intermediate queries.
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (rs *ReceiptSelect) Scan(ctx context.Context, v interface{}) error {
	return rs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rs *ReceiptSelect) ScanX(ctx context.Context, v interface{}) {
	if err := rs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (rs *ReceiptSelect) Strings(ctx context.Context) ([]string, error) {
	if len(rs.fields) > 1 {
		return nil, errors.New("ent: ReceiptSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := rs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rs *ReceiptSelect) StringsX(ctx context.Context) []string {
	v, err := rs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (rs *ReceiptSelect) Ints(ctx context.Context) ([]int, error) {
	if len(rs.fields) > 1 {
		return nil, errors.New("ent: ReceiptSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := rs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rs *ReceiptSelect) IntsX(ctx context.Context) []int {
	v, err := rs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (rs *ReceiptSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(rs.fields) > 1 {
		return nil, errors.New("ent: ReceiptSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := rs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rs *ReceiptSelect) Float64sX(ctx context.Context) []float64 {
	v, err := rs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (rs *ReceiptSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(rs.fields) > 1 {
		return nil, errors.New("ent: ReceiptSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := rs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rs *ReceiptSelect) BoolsX(ctx context.Context) []bool {
	v, err := rs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rs *ReceiptSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := rs.sqlQuery().Query()
	if err := rs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rs *ReceiptSelect) sqlQuery() sql.Querier {
	view := "receipt_view"
	return sql.Select(rs.fields...).From(rs.sql.As(view))
}
