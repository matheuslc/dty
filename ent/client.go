// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/matheuslc/dty/ent/migrate"

	"github.com/matheuslc/dty/ent/direction"
	"github.com/matheuslc/dty/ent/ingredient"
	"github.com/matheuslc/dty/ent/receipt"
	"github.com/matheuslc/dty/ent/user"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Direction is the client for interacting with the Direction builders.
	Direction *DirectionClient
	// Ingredient is the client for interacting with the Ingredient builders.
	Ingredient *IngredientClient
	// Receipt is the client for interacting with the Receipt builders.
	Receipt *ReceiptClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	c := config{log: log.Println}
	c.options(opts...)
	return &Client{
		config:     c,
		Schema:     migrate.NewSchema(c.driver),
		Direction:  NewDirectionClient(c),
		Ingredient: NewIngredientClient(c),
		Receipt:    NewReceiptClient(c),
		User:       NewUserClient(c),
	}
}

// Open opens a connection to the database specified by the driver name and a
// driver-specific data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil

	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug}
	return &Tx{
		config:     cfg,
		Direction:  NewDirectionClient(cfg),
		Ingredient: NewIngredientClient(cfg),
		Receipt:    NewReceiptClient(cfg),
		User:       NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Direction.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true}
	return &Client{
		config:     cfg,
		Schema:     migrate.NewSchema(cfg.driver),
		Direction:  NewDirectionClient(cfg),
		Ingredient: NewIngredientClient(cfg),
		Receipt:    NewReceiptClient(cfg),
		User:       NewUserClient(cfg),
	}
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// DirectionClient is a client for the Direction schema.
type DirectionClient struct {
	config
}

// NewDirectionClient returns a client for the Direction from the given config.
func NewDirectionClient(c config) *DirectionClient {
	return &DirectionClient{config: c}
}

// Create returns a create builder for Direction.
func (c *DirectionClient) Create() *DirectionCreate {
	return &DirectionCreate{config: c.config}
}

// Update returns an update builder for Direction.
func (c *DirectionClient) Update() *DirectionUpdate {
	return &DirectionUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *DirectionClient) UpdateOne(d *Direction) *DirectionUpdateOne {
	return c.UpdateOneID(d.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *DirectionClient) UpdateOneID(id int) *DirectionUpdateOne {
	return &DirectionUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Direction.
func (c *DirectionClient) Delete() *DirectionDelete {
	return &DirectionDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DirectionClient) DeleteOne(d *Direction) *DirectionDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DirectionClient) DeleteOneID(id int) *DirectionDeleteOne {
	return &DirectionDeleteOne{c.Delete().Where(direction.ID(id))}
}

// Create returns a query builder for Direction.
func (c *DirectionClient) Query() *DirectionQuery {
	return &DirectionQuery{config: c.config}
}

// Get returns a Direction entity by its id.
func (c *DirectionClient) Get(ctx context.Context, id int) (*Direction, error) {
	return c.Query().Where(direction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DirectionClient) GetX(ctx context.Context, id int) *Direction {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// IngredientClient is a client for the Ingredient schema.
type IngredientClient struct {
	config
}

// NewIngredientClient returns a client for the Ingredient from the given config.
func NewIngredientClient(c config) *IngredientClient {
	return &IngredientClient{config: c}
}

// Create returns a create builder for Ingredient.
func (c *IngredientClient) Create() *IngredientCreate {
	return &IngredientCreate{config: c.config}
}

// Update returns an update builder for Ingredient.
func (c *IngredientClient) Update() *IngredientUpdate {
	return &IngredientUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *IngredientClient) UpdateOne(i *Ingredient) *IngredientUpdateOne {
	return c.UpdateOneID(i.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *IngredientClient) UpdateOneID(id int) *IngredientUpdateOne {
	return &IngredientUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Ingredient.
func (c *IngredientClient) Delete() *IngredientDelete {
	return &IngredientDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *IngredientClient) DeleteOne(i *Ingredient) *IngredientDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *IngredientClient) DeleteOneID(id int) *IngredientDeleteOne {
	return &IngredientDeleteOne{c.Delete().Where(ingredient.ID(id))}
}

// Create returns a query builder for Ingredient.
func (c *IngredientClient) Query() *IngredientQuery {
	return &IngredientQuery{config: c.config}
}

// Get returns a Ingredient entity by its id.
func (c *IngredientClient) Get(ctx context.Context, id int) (*Ingredient, error) {
	return c.Query().Where(ingredient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IngredientClient) GetX(ctx context.Context, id int) *Ingredient {
	i, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return i
}

// ReceiptClient is a client for the Receipt schema.
type ReceiptClient struct {
	config
}

// NewReceiptClient returns a client for the Receipt from the given config.
func NewReceiptClient(c config) *ReceiptClient {
	return &ReceiptClient{config: c}
}

// Create returns a create builder for Receipt.
func (c *ReceiptClient) Create() *ReceiptCreate {
	return &ReceiptCreate{config: c.config}
}

// Update returns an update builder for Receipt.
func (c *ReceiptClient) Update() *ReceiptUpdate {
	return &ReceiptUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReceiptClient) UpdateOne(r *Receipt) *ReceiptUpdateOne {
	return c.UpdateOneID(r.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *ReceiptClient) UpdateOneID(id int) *ReceiptUpdateOne {
	return &ReceiptUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Receipt.
func (c *ReceiptClient) Delete() *ReceiptDelete {
	return &ReceiptDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ReceiptClient) DeleteOne(r *Receipt) *ReceiptDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ReceiptClient) DeleteOneID(id int) *ReceiptDeleteOne {
	return &ReceiptDeleteOne{c.Delete().Where(receipt.ID(id))}
}

// Create returns a query builder for Receipt.
func (c *ReceiptClient) Query() *ReceiptQuery {
	return &ReceiptQuery{config: c.config}
}

// Get returns a Receipt entity by its id.
func (c *ReceiptClient) Get(ctx context.Context, id int) (*Receipt, error) {
	return c.Query().Where(receipt.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReceiptClient) GetX(ctx context.Context, id int) *Receipt {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryIngredients queries the ingredients edge of a Receipt.
func (c *ReceiptClient) QueryIngredients(r *Receipt) *IngredientQuery {
	query := &IngredientQuery{config: c.config}
	id := r.ID
	query.sql = sql.Select().From(sql.Table(ingredient.Table)).
		Where(sql.EQ(receipt.IngredientsColumn, id))

	return query
}

// QueryDirections queries the directions edge of a Receipt.
func (c *ReceiptClient) QueryDirections(r *Receipt) *DirectionQuery {
	query := &DirectionQuery{config: c.config}
	id := r.ID
	query.sql = sql.Select().From(sql.Table(direction.Table)).
		Where(sql.EQ(receipt.DirectionsColumn, id))

	return query
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	return &UserCreate{config: c.config}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	return &UserUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	return c.UpdateOneID(u.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	return &UserUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	return &UserDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	return &UserDeleteOne{c.Delete().Where(user.ID(id))}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}
