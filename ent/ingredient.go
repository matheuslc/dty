// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bytes"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
)

// Ingredient is the model entity for the Ingredient schema.
type Ingredient struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// UnitType holds the value of the "unitType" field.
	UnitType string `json:"unitType,omitempty"`
}

// FromRows scans the sql response data into Ingredient.
func (i *Ingredient) FromRows(rows *sql.Rows) error {
	var vi struct {
		ID       int
		Name     sql.NullString
		UnitType sql.NullString
	}
	// the order here should be the same as in the `ingredient.Columns`.
	if err := rows.Scan(
		&vi.ID,
		&vi.Name,
		&vi.UnitType,
	); err != nil {
		return err
	}
	i.ID = vi.ID
	i.Name = vi.Name.String
	i.UnitType = vi.UnitType.String
	return nil
}

// Update returns a builder for updating this Ingredient.
// Note that, you need to call Ingredient.Unwrap() before calling this method, if this Ingredient
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Ingredient) Update() *IngredientUpdateOne {
	return (&IngredientClient{i.config}).UpdateOne(i)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (i *Ingredient) Unwrap() *Ingredient {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ingredient is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Ingredient) String() string {
	buf := bytes.NewBuffer(nil)
	buf.WriteString("Ingredient(")
	buf.WriteString(fmt.Sprintf("id=%v", i.ID))
	buf.WriteString(fmt.Sprintf(", name=%v", i.Name))
	buf.WriteString(fmt.Sprintf(", unitType=%v", i.UnitType))
	buf.WriteString(")")
	return buf.String()
}

// Ingredients is a parsable slice of Ingredient.
type Ingredients []*Ingredient

// FromRows scans the sql response data into Ingredients.
func (i *Ingredients) FromRows(rows *sql.Rows) error {
	for rows.Next() {
		vi := &Ingredient{}
		if err := vi.FromRows(rows); err != nil {
			return err
		}
		*i = append(*i, vi)
	}
	return nil
}

func (i Ingredients) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
