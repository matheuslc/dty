// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"log"

	"github.com/facebookincubator/ent/dialect/sql"
)

// dsn for the database. In order to run the tests locally, run the following command:
//
//	 ENT_INTEGRATION_ENDPOINT="root:pass@tcp(localhost:3306)/test?parseTime=True" go test -v
//
var dsn string

func ExampleDirection() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the direction's edges.

	// create direction vertex with its edges.
	d := client.Direction.
		Create().
		SetDescription("string").
		SetName("string").
		SaveX(ctx)
	log.Println("direction created:", d)

	// query edges.

	// Output:
}
func ExampleIngredient() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the ingredient's edges.

	// create ingredient vertex with its edges.
	i := client.Ingredient.
		Create().
		SetName("string").
		SetUnitType("string").
		SaveX(ctx)
	log.Println("ingredient created:", i)

	// query edges.

	// Output:
}
func ExampleReceipt() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the receipt's edges.
	i0 := client.Ingredient.
		Create().
		SetName("string").
		SetUnitType("string").
		SaveX(ctx)
	log.Println("ingredient created:", i0)
	d1 := client.Direction.
		Create().
		SetDescription("string").
		SetName("string").
		SaveX(ctx)
	log.Println("direction created:", d1)

	// create receipt vertex with its edges.
	r := client.Receipt.
		Create().
		SetName("string").
		SetPortions(1).
		AddIngredients(i0).
		AddDirections(d1).
		SaveX(ctx)
	log.Println("receipt created:", r)

	// query edges.
	i0, err = r.QueryIngredients().First(ctx)
	if err != nil {
		log.Fatalf("failed querying ingredients: %v", err)
	}
	log.Println("ingredients found:", i0)

	d1, err = r.QueryDirections().First(ctx)
	if err != nil {
		log.Fatalf("failed querying directions: %v", err)
	}
	log.Println("directions found:", d1)

	// Output:
}
func ExampleUser() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the user's edges.

	// create user vertex with its edges.
	u := client.User.
		Create().
		SaveX(ctx)
	log.Println("user created:", u)

	// query edges.

	// Output:
}
